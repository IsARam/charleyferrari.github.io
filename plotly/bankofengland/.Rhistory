appendlist <- expand.grid(alphabet, alphabet, alphabet, alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,
appendlist$Var4,appendlist$Var5,appendlist$Var6,
sep="")
useruniverse <- paste("Joe Fakename", letterlist, sep="")
appendlist <- expand.grid(alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,sep="")
companyuniverse <- paste("Company", letterlist, sep="")
industryweights <- sample(1:100,length(alphabet),replace=TRUE)
companylist <- data.frame(Company = companyuniverse,
Industry = sample(alphabet, length(companyuniverse),
replace = TRUE, prob = industryweights))
appendlist <- expand.grid(alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,sep="")
productuniverse <- paste("Product", letterlist, sep="")
companyweights <- sample(1:100, length(companyuniverse), replace=TRUE)
userlist <- data.frame(User = useruniverse,
Company = sample(companyuniverse, length(useruniverse),
replace = TRUE, prob = companyweights))
productweights <- sample(1:100, length(alphabet), replace=TRUE)
pricelist <- data.frame(Product = productuniverse,
Type = sample(alphabet, length(productuniverse), replace = TRUE,
prob = productweights),
Price = sample(15:100, length(productuniverse), replace = TRUE))
randomdategen <- function(N, st=ISOdatetime(2015,1,1,0,0,1),
et=ISOdatetime(2015,12,31,23,59,59)){
dt <- as.numeric(difftime(et,st,unit='sec'))
ev <- sort(runif(N,0,dt))
rt <- st + ev
return(rt)
}
productweights <- sample(1:100,49,replace=TRUE)
usage2015 <- data.frame(User = sample(useruniverse, 10000, replace = TRUE),
TimeStamp = randomdategen(10000),
Product = sample(productuniverse, 10000, replace = TRUE,
prob = productweights))
companylist <- merge(companylist, industrylist, by="Industry")
industrylist <- data.frame(Industry = alphabet,
IndustryName = c("Agriculture", "Construction", "Manufacturing",
"Retail", "Transportation", "Finance",
"Healthcare"))
companylist <- merge(companylist, industrylist, by="Industry")
detach(MASS)
detach('MASS')
search()
detatch"package:caret"
detatch("package:caret")
detach("package:caret")
detach("package:leaps")
detach("package:bestglm")
detach("package:leaps")
detach("package:grid")
detach("package:pROC")
detach("package:rsconnect")
detach("package:gridExtra")
detach("package:MASS")
select(companlist, Industry)
select(companylist, Industry)
companylist <- select(companylist, -Industry)
colnames(companylist) <- c("Company", "Industry")
pricelist <- merge(pricelist, productlist, by="Type")
productlist <- data.frame(Type = alphabet,
ProductType = c("Alkali", "Alkaline", "Lanthanoids",
"Actinoids", "Metals", "Non-Metals",
"Noble Gases"))
pricelist <- merge(pricelist, productlist, by="Type")
pricelist <- select(pricelist, -Type)
colnames(pricelist)
colnames(pricelist) <- c("Product", "Price", "Type")
usage2015 <- merge(userlist, usage2015, by='User')
usage2015 <- merge(companylist, usage2015, by='Company')
usage2015 <- merge(pricelist, usage2015, by='Product')
usage2015$Month <- month(usage2015$TimeStamp)
library(lubridate)
usage2015$Month <- month(usage2015$TimeStamp)
usage2015$Date <- day(usage2015$TimeStamp)
View(userlist)
View(usage2015)
write.csv(usage2015, 'usage2015.csv', row.names = FALSE)
View(usage2015)
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
runApp()
library('shiny')
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
runApp()
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
alphabet <- c('A','B','C', 'D','E','F','G')
appendlist <- expand.grid(alphabet, alphabet, alphabet, alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,
appendlist$Var4,appendlist$Var5,appendlist$Var6,
sep="")
useruniverse <- paste("Joe Fakename", letterlist, sep="")
appendlist <- expand.grid(alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,sep="")
companyuniverse <- paste("Company", letterlist, sep="")
industryweights <- sample(1:100,length(alphabet),replace=TRUE)
companylist <- data.frame(Company = companyuniverse,
Industry = sample(alphabet, length(companyuniverse),
replace = TRUE, prob = industryweights))
appendlist <- expand.grid(alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,sep="")
productuniverse <- paste("Product", letterlist, sep="")
companyweights <- sample(1:100, length(companyuniverse), replace=TRUE)
userlist <- data.frame(User = useruniverse,
Company = sample(companyuniverse, length(useruniverse),
replace = TRUE, prob = companyweights))
productweights <- sample(1:100, length(alphabet), replace=TRUE)
pricelist <- data.frame(Product = productuniverse,
Type = sample(alphabet, length(productuniverse), replace = TRUE,
prob = productweights),
Price = sample(15:100, length(productuniverse), replace = TRUE))
randomdategen <- function(N, st=ISOdatetime(2015,1,1,0,0,1),
et=ISOdatetime(2015,12,31,23,59,59)){
dt <- as.numeric(difftime(et,st,unit='sec'))
ev <- sort(runif(N,0,dt))
rt <- st + ev
return(rt)
}
productweights <- sample(1:100,49,replace=TRUE)
usage2015 <- data.frame(User = sample(useruniverse, 10000, replace = TRUE),
TimeStamp = randomdategen(10000),
Product = sample(productuniverse, 10000, replace = TRUE,
prob = productweights))
write.csv(companylist, 'companylist.csv', row.names = FALSE)
write.csv(pricelist, 'pricelist.csv', row.names = FALSE)
write.csv(usage2015, 'usage2015.csv', row.names = FALSE)
write.csv(userlist, 'userlist.csv', row.names = FALSE)
runApp()
usage2015$Month <- month(usage2015$TimeStamp)
usage2015$Date <- day(usage2015$TimeStamp)
library(rsconnect)
rsconnect::setAccountInfo(name='charleyferrari',
token='677D07BE4228BE11D2B7B03BDCD39DFD',
secret='psObDPx7zPlr3aHW/yud7zdxR5LSI5Q+XZW/VreK')
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app')
rsconnect::setAccountInfo(name='charleyferrari',
token='677D07BE4228BE11D2B7B03BDCD39DFD',
secret='psObDPx7zPlr3aHW/yud7zdxR5LSI5Q+XZW/VreK')
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app')
runApp()
runApp()
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
runApp()
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app')
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
alphabet <- c('A','B','C', 'D','E','F','G')
appendlist <- expand.grid(alphabet, alphabet, alphabet, alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,
appendlist$Var4,appendlist$Var5,appendlist$Var6,
sep="")
useruniverse <- paste("Joe Fakename", letterlist, sep="")
appendlist <- expand.grid(alphabet, alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,appendlist$Var3,sep="")
companyuniverse <- paste("Company", letterlist, sep="")
industryweights <- sample(1:100,length(alphabet),replace=TRUE)
companylist <- data.frame(Company = companyuniverse,
Industry = sample(alphabet, length(companyuniverse),
replace = TRUE, prob = industryweights))
appendlist <- expand.grid(alphabet, alphabet)
letterlist <- paste(appendlist$Var1,appendlist$Var2,sep="")
productuniverse <- paste("Product", letterlist, sep="")
companyweights <- sample(1:100, length(companyuniverse), replace=TRUE)
userlist <- data.frame(User = useruniverse,
Company = sample(companyuniverse, length(useruniverse),
replace = TRUE, prob = companyweights))
productweights <- sample(1:100, length(alphabet), replace=TRUE)
pricelist <- data.frame(Product = productuniverse,
Type = sample(alphabet, length(productuniverse), replace = TRUE,
prob = productweights),
Price = sample(15:100, length(productuniverse), replace = TRUE))
randomdategen <- function(N, st=ISOdatetime(2015,1,1,0,0,1),
et=ISOdatetime(2015,12,31,23,59,59)){
dt <- as.numeric(difftime(et,st,unit='sec'))
ev <- sort(runif(N,0,dt))
rt <- st + ev
return(rt)
}
productweights <- sample(1:100,49,replace=TRUE)
usage2015 <- data.frame(User = sample(useruniverse, 10000, replace = TRUE),
TimeStamp = randomdategen(10000),
Product = sample(productuniverse, 10000, replace = TRUE,
prob = productweights))
industrylist <- data.frame(Industry = alphabet,
IndustryName = c("Agriculture", "Construction", "Manufacturing",
"Retail", "Transportation", "Finance",
"Healthcare"))
companylist <- merge(companylist, industrylist, by="Industry")
companylist <- select(companylist, -Industry)
colnames(companylist) <- c("Company", "Industry")
productlist <- data.frame(Type = alphabet,
ProductType = c("Alkali", "Alkaline", "Lanthanoids",
"Actinoids", "Metals", "Non-Metals",
"Noble Gases"))
pricelist <- merge(pricelist, productlist, by="Type")
pricelist <- select(pricelist, -Type)
colnames(pricelist) <- c("Product", "Price", "Type")
View(productlist)
View(pricelist)
setwd('/Users/Charley/Downloads/Plotly/Dow/app')
write.csv(companylist, 'companylist.csv', row.names = FALSE)
write.csv(pricelist, 'pricelist.csv', row.names = FALSE)
write.csv(usage2015, 'usage2015.csv', row.names = FALSE)
write.csv(userlist, 'userlist.csv', row.names = FALSE)
runApp()
usage2015$Month <- month(usage2015$TimeStamp)
usage2015$Date <- day(usage2015$TimeStamp)
write.csv(companylist, 'companylist.csv', row.names = FALSE)
write.csv(pricelist, 'pricelist.csv', row.names = FALSE)
write.csv(usage2015, 'usage2015.csv', row.names = FALSE)
write.csv(userlist, 'userlist.csv', row.names = FALSE)
runApp()
rsconnect::setAccountInfo(name='charleyferrari',
token='677D07BE4228BE11D2B7B03BDCD39DFD',
secret='psObDPx7zPlr3aHW/yud7zdxR5LSI5Q+XZW/VreK')
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app')
rsconnect::setAccountInfo(name='charleyferrari',
token='677D07BE4228BE11D2B7B03BDCD39DFD',
secret='psObDPx7zPlr3aHW/yud7zdxR5LSI5Q+XZW/VreK')
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app', appName = "faketest")
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app', appName = "faketest")
rsconnect::deployApp('/Users/Charley/Downloads/Plotly/Dow/app', appName = "faketest")
library(dplyr)
library(ggplot2)
setwd("/Users/Charley/Downloads/Plotly/Impact")
sampledata <- read.csv("SampleData-S.csv")
View(sampledata)
View(sampledata)
ggplot(sampledata, aes(x=price_point, y=Price))
ggplot(sampledata, aes(x=price_point, y=Price)) + geom_bar()
ggplot(sampledata, aes(x=price_point, y=Price)) + geom_point()
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_point()
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat=count())
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat=n())
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat=count.fields)
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat=count(Price))
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat=count(sampledata))
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat="bin")
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat_bin())
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_bar(stat='bin')
ggplot(sampledata, aes(x=price_point, y=Price, color=Seller)) + geom_point()
setwd("/Users/Charley/Downloads/Plotly/Bank of England")
econdata <- read.csv("econdata.csv")
View(econdata)
econdata$date <- as.POSIXct(econdata$date)
econdata <- read.csv("econdata.csv")
?strptime
econdata$date <- strftime(econdata$date, format = '%m/%d/%Y')
econdata$date <- strptime(econdata$date, format = '%m/%d/%Y')
econdata$date <- as.POSIXct(strptime(econdata$date, format = '%m/%d/%Y'))
econdata <- read.csv("econdata.csv")
econdata$date <- as.POSIXct(strptime(econdata$date, format = '%m/%d/%Y'))
ggplot(econdata, aes(x=date, y=ValueAdd))
ggplot(econdata, aes(x=date, y=ValueAdd)) + geom_line()
meancvs <- read.csv("meancvs.csv")
meancvs$date <- as.POSIXct(strptime(meancvs$date, format = "%m/%d/%Y"))
ggplot(filter(meancvs, Sector == "Current"), aes(x=date, y=DemandScore)) + geom_line()
ggplot(filter(meancvs, ScoreType == "Current"), aes(x=date, y=DemandScore)) + geom_line()
levels(meancvs$ScoreType)
levels(meancvs$Sector)
ggplot(filter(meancvs, ScoreType == "Current", Sector == "Total"),
aes(x=date, y=DemandScore)) + geom_line()
library(plotly)
plot_ly(econdata, x=date, y=ValueAdd, type = 'line')
plot_ly(filter(meancvs, ScoreType == "Current", Sector == "Total"),
x=date, y=DemandScore, type='line')
meancvsfilt <- filter(meancvs, ScoreType == "Current", Sector == "Total")
plot_ly(meancvsfilt, x=date, y=DemandScore, type='line')
agents <- read.csv('agents.csv')
agentsfilt <- filter(agents, ActualDateDisplay == '1/1/2008', ScoreType == 'Current')
ggplot(agentsfilt, aes(x=DemandScore)) + geom_bar(stat='bin')
ggplot(agentsfilt, aes(x=factor(DemandScore))) + geom_bar(stat='bin')
ggplot(agentsfilt, aes(x=factor(DemandScore))) + geom_bar(stat='count')
library(reshape2)
?melt
agentsmelt <- melt(agents, id.vars=c('ActualDateDisplay', 'Sector', 'ScoreType'))
View(agentsmelt)
agentsmelt <- melt(agents, id.vars=c('ActualDateDisplay', 'Sector', 'ScoreType'),
variable.name = 'Concept', value.name = 'Score')
View(agentsmelt)
View(agentsmelt)
agents <- read.csv('agents.csv')
agentsfilt <- filter(agents, ActualDateDisplay == '1/1/2008', ScoreType == 'Current')
rm(agentsmelt)
rm(agentsfilt)
agentsfilt <- filter(agents, ActualDateDisplay == '1/1/2008', ScoreType == 'Current')
rm(agentsfilt)
agentsagg <- agents %>%
filter(AcutalDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
filter(Sector == 'Business and financial services') %>%
group_by(DemandScore) %>%
summarize(Av = mean(ExportScore))
agentsagg <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
filter(Sector == 'Business and financial services') %>%
group_by(DemandScore) %>%
summarize(Av = mean(ExportScore))
View(agentsagg)
agentsagg <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
filter(Sector == 'Business and financial services') %>%
group_by(DemandScore) %>%
summarize(Av = mean(ExportScore), Cnt = n(ExportScore))
agentsagg <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
filter(Sector == 'Business and financial services') %>%
group_by(DemandScore) %>%
summarize(Av = mean(ExportScore), Cnt = n())
View(agentsagg)
plot_ly(agentsagg, x=DemandScore, y=Av, size=Cnt)
plot_ly(agentsagg, x=DemandScore, y=Av, size=Cnt/4, type='scatter')
plot_ly(agentsagg, x=DemandScore, y=Av, size=Cnt/4, type='scatter', mode='point')
agentsfilt <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
group_by(factor(DemandScore)) %>%
summarize(Cnt = n())
View(agentsfilt)
View(agentsfilt)
agentsfilt <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
group_by(DemandScore) %>%
summarize(Cnt = n())
plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
agentsagg <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
#  filter(Sector == 'Business and financial services') %>%
group_by(DemandScore) %>%
summarize(Av = mean(ExportScore), Cnt = n())
plot_ly(agentsagg, x=DemandScore, y=Av, size=Cnt/4, type='scatter', mode='point')
p1 <- plot_ly(econdata, x=date, y=ValueAdd, type = 'line')
p2 <- plot_ly(meancvsfilt, x=date, y=DemandScore, type='line')
p3 <- plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
p4 <- plot_ly(agentsagg, x=DemandScore, y=Av, size=Cnt/4, type='scatter', mode='point')
plotly_POST(p1)
plotly_POST(p2)
plotly_POST(p3)
plotly_POST(p4)
plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker - list(size=Cnt, sizemode = 'area', sizeref = 0.05))
plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.05))
plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.025))
plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.1))
p4 <- plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.1))
p4 <- plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='point',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.1))
plotly_post(p4, filename = "Company Visit Scores/Two Concept Comparison",
fileopt = "overwrite")
plotly_POST(p4, filename = "Company Visit Scores/Two Concept Comparison",
fileopt = "overwrite")
plot_ly(agentsagg, x=DemandScore, y=Av, type='scatter', mode='markers',
marker = list(size=Cnt, sizemode = 'area', sizeref = 0.1))
load("~/Downloads/Plotly/hpi examples/R/hpraw2.RData")
city <- "Atlanta"
hpcity <- hpcitycreate(city, T)
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
p1 <- plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
plotly_POST(p1, filename = "hpi/HPI R Overwrite", fileopt = "overwrite")
city <- "phoenix"
hpcity <- hpcitycreate(city, T)
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
hpcity <- hpcitycreate(city, T)
city <- "Phoenix"
hpcity <- hpcitycreate(city, T)
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
install.packages('forecast')
library(forecast)
View(hpcity)
library(quandl)
install.packages('quandl')
library(Quandl)
install.packages('Quandl')
hpimiddle <- Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6", transform="No Transform")
library(Quandl)
hpimiddle <- Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6", transform="No Transform")
hpimiddle <- Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6")
View(hpimiddle)
hpi <- ts(hpimiddle, f=12)
forecast1 <- auto.arima(hpi, h=10)
forecast1 <- auto.arima(hpi)
Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6", transform="diff")
hpimiddle <- Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6", transform="diff")
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
p1 <- plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
plotly_POST(p1, filename = "hpi/HPI R Overwrite", fileopt = "overwrite")
hpimiddle <- Quandl("ZILL/M00015_MT", api_key="1Cx13bkj4vDb7E13GLD6")
hpi <- ts(hpimiddle, f=12)
hpimiddle
View(hpcity)
city <- "Minneapolis"
hpcity <- hpcitycreate(city, T)
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
ggplot(hpcity, aes(x=DATE, y=HPI, group = Tier)) +
geom_line()
p1 <- ggplot(hpcity, aes(x=DATE, y=HPI, color = Tier)) +
geom_line()
ggplot(hpcity, aes(x=DATE, y=HPI, color = Tier)) +
geom_line()
plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
p1 <- plot_ly(hpcity, x = DATE, y = HPI, group = Tier) %>%
layout(title = paste(city, "HPI", sep=" "))
View(hp)
library(faraway)
data(gala)
gala <- gala
View(gala)
chicago <- chicago
View(chicago)
data <- debt
View(data)
library(faraway)
debt <- debt
library(dplyr)
library(ggplot2)
library(plotly)
debtagg <- debt %>%
group_by(incomegp) %>%
summarize(count = n())
View(debtagg)
View(debt)
debt <- filter(debt, !is.na(incomgp))
debt <- filter(debt, incomegp != NA)
debt <- debt
debt <- debt[!is.na(debt$incomegp),]
debt <- debt
debt <- debt
debt <- debt[!is.na(debt$incomegp),]
debtagg <- debt %>%
group_by(incomegp) %>%
summarize(count = n())
plot_ly(debtagg, x=incomgp, y=count, type='bar')
plot_ly(debtagg, x=incomegp, y=count, type='bar')
debt <- select(debt, incomegp, house, bankacc, ccarduse, cigbuy)
summarise(debt)
summary(debt)
debt <- debt[!is.na(debt$house),]
debt <- debt[!is.na(debt$bankacc),]
debt <- debt[!is.na(debt$ccarduse),]
debt <- debt[!is.na(debt$cigbuy),]
debt$house <- factor(debt$house)
levels(debt$house)
levels(debt$house) <- c('Rent', 'Mortgage', 'Owned Outright')
debt$bankacc <- factor(debt$bankacc)
levels(debt$bankacc)
levels(debt$bankacc) <- c('No', 'Yes')
debt$ccarduse <- factor(debt$ccarduse)
levels(debt$ccarduse)
levels(debt$ccarduse) <- c('Never', 'Sometimes', 'Regularly')
debt$cigbuy <- factor(debt$cigbuy)
levels(debt$cigbuy)
levels(debt$cigbuy) <- c('No', 'Yes')
p1 <- plot_ly(debtagg, x=incomegp, y=count, type='bar')
plotly_POST(p1)
gos <- gala
View(gos)
View(gos)
agents <- read.csv('agents.csv')
agentsfilt <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
group_by(DemandScore) %>%
summarize(Cnt = n())
plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
agents <- read.csv('agents.csv')
View(agents)
setwd('/Users/Charley/Downloads/charleyferrari.github.io/plotly/bankofengland')
agents <- read.csv('agents.csv')
setwd('/Users/Charley/Downloads/Plotly/Bank of England')
agents <- read.csv('agents.csv')
agentsold <- agents
setwd('/Users/Charley/Downloads/charleyferrari.github.io/plotly/bankofengland')
agents <- read.csv('agents.csv')
View(agentsold)
View(agents)
agentscurrent <- agents[,c(1:5,7,9,10,13)]
agentsfuture <- agents[,c(1,2,14:16,18,20,21,24)]
colnames(agentsfuture) <- colnames(agentscurrent)
agentscurrent$ScoreType <- 'Current'
agentsfuture$ScoreType <- 'Future'
agents <- rbind(agentscurrent, agentsfuture)
agents <- read.csv('agents.csv')
agentscurrent <- agents[,c(1:13)]
agentsfuture <- agents[,c(1,2,14:24)]
colnames(agentsfuture) <- colnames(agentscurrent)
agentscurrent$ScoreType <- 'Current'
agentsfuture$ScoreType <- 'Future'
agents <- rbind(agentscurrent, agentsfuture)
View(agents)
write.csv(agents, 'agentsnew.csv', row.names = FALSE)
agentsfilt <- agents %>%
filter(ActualDateDisplay == '1/1/2008', ScoreType == 'Current') %>%
group_by(DemandScore) %>%
summarize(Cnt = n())
plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
agentsfilt <- agents %>%
filter(ActualDateDisplay == 'Q1-2008', ScoreType == 'Current') %>%
group_by(DemandScore) %>%
summarize(Cnt = n())
plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
p3 <- plot_ly(agentsfilt, x=DemandScore, y=Cnt, type='bar')
plotly_POST(p3, filename = "Company Visit Scores/Date Histogram",
fileopt = "overwrite")
colnames(agents)
